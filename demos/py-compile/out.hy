(import sys) (import math) (import pymunk) (import [pyphysicssandbox [*]]) (import pygame) (import [pyphysicssandbox [Vec2d]]) (setv w 200) (setv h 190) (setv user_shapes []) (setv image_bindings []) (setv pivots []) (setv connected_shapes []) (setv click-handled 2) (window "Most Awesome Thing Ever" w h) (defn make_obj4 [off-x off-y] (do (do (setv obj4 (static_box [(+ (int (- 100 100)) (int off-x)) (+ (int (- 185 5)) (int off-y))] 200 10)) (setv obj4.color (Color "white")) (setv obj4.group 4) (setv obj4_image (pygame.image.load "./obj4.png")) (image-bindings.append [obj4 obj4_image]) (user_shapes.append obj4) obj4))) (setv obj4 (make_obj4 0 0)) (defn make_obj8 [off-x off-y] (do (do (setv obj8 (cosmetic_ball [(+ (int 100) (int off-x)) (+ (int 130)) (int off-y)] 50)) (setv obj8.color (Color "white")) (setv obj8.group 8) (setv obj8_image (pygame.image.load "./obj8.png")) (image-bindings.append [obj8 obj8_image]) (user_shapes.append obj8) obj8))) (setv obj8 (make_obj8 0 0)) (defn make_obj6 [off-x off-y] (do (do (setv obj6 (cosmetic_ball [(+ (int 165) (int off-x)) (+ (int 40)) (int off-y)] 25)) (setv obj6.color (Color "white")) (setv obj6.group 6) (setv obj6_image (pygame.image.load "./obj6.png")) (image-bindings.append [obj6 obj6_image]) (user_shapes.append obj6) obj6))) (setv obj6 (make_obj6 0 0)) (defn make_obj2 [off-x off-y] (do (do (setv obj2 (ball [(+ (int 100) (int off-x)) (+ (int 40)) (int off-y)] 40)) (setv obj2.color (Color "white")) (setv obj2.group 2) (setv obj2_image (pygame.image.load "./obj2.png")) (image-bindings.append [obj2 obj2_image]) (user_shapes.append obj2) (do (setv (. obj2 mass) 10)) obj2))) (setv obj2 (make_obj2 0 0)) (defn make_obj5 [off-x off-y] (do (do (setv obj5 (cosmetic_ball [(+ (int 35) (int off-x)) (+ (int 40)) (int off-y)] 25)) (setv obj5.color (Color "white")) (setv obj5.group 5) (setv obj5_image (pygame.image.load "./obj5.png")) (image-bindings.append [obj5 obj5_image]) (user_shapes.append obj5) obj5))) (setv obj5 (make_obj5 0 0)) (defn image-for [s] (do (global image-bindings) (for (b image-bindings) (if (= (. b [0]) s) (return (. b [1])))) (return False))) (defn draw-images [cosmetic] (do (defn f [keys] (do (global user-shapes) (for (s user-shapes) (if (not (image-for s)) (continue)) (if (not (= cosmetic (. s _cosmetic))) (continue)) (if (not (. s active)) (continue)) (if (. s body) (setv p (Vec2d (. s body position x) (. s body position y))) (setv p (Vec2d (. s _x) (. s _y)))) (setv angle 0) (if (. s body) (setv angle (. s body angle))) (setv angle_degrees (math.degrees angle)) (setv rotated_logo_img (pygame.transform.rotate (image-for s) (* -1 angle-degrees))) (setv offset (/ (Vec2d (rotated_logo_img.get_size)) 2)) (setv p (- p offset)) (setv screen (pygame.display.get-surface)) (screen.blit rotated_logo_img p)))) (return f))) (defn draw_pivot_lines [keys] (do (global pivots) (for (p pivots) (setv start (. p body position)) (for (j (. p shape)) (if (not p.active) (continue)) (setv other (. j a)) (setv end (. other position)) (setv screen (pygame.display.get_surface)) (pygame.draw.line screen (Color "black") start end))))) (defn draw_connection_lines [keys] (do (for (c connected_shapes) (setv start (. c [0] body position)) (setv end (. c [1] body position)) (if (or (not (. c [0] active)) (not (. c [1] active))) (do (deactivate (. c [2])) (continue))) (setv screen (pygame.display.get_surface)) (pygame.draw.line screen (Color "black") start end)))) (defn clear-click [keys] (do (do (global click-handled) (setv click-handled (max 0 (- click-handled 1)))))) (add-observer clear-click) (add-observer (draw-images True)) (add-observer draw_pivot_lines) (add-observer draw_connection_lines) (add-observer (draw-images False)) (run)