((import math) (import pymunk) (import [pyphysicssandbox [*]]) (import pygame) (import [pyphysicssandbox [Vec2d]]) (setv w 505) (setv h 373) (setv user_shapes []) (setv image_bindings []) (setv pivots []) (setv connected_shapes []) (window "Most Awesome Thing Ever" 505 373) (do (setv obj7 (static_box (int 0) (int 363) 505 10)) (setv obj7.color (Color "white")) (setv obj7.group 7) (setv obj7_image (pygame.image.load "/Users/thoughtstem/Dev/Python/py-fizzery/obj7.png")) (image-bindings.append [obj7 obj7_image]) (user_shapes.append obj7)) (do (setv obj9 (static_box (int 495) (int 10) 10 353)) (setv obj9.color (Color "white")) (setv obj9.group 9) (setv obj9_image (pygame.image.load "/Users/thoughtstem/Dev/Python/py-fizzery/obj9.png")) (image-bindings.append [obj9 obj9_image]) (user_shapes.append obj9)) (do (setv obj5 (cosmetic_ball (int 505/2) (int 373/2) 485/2)) (setv obj5.color (Color "white")) (setv obj5.group 5) (setv obj5_image (pygame.image.load "/Users/thoughtstem/Dev/Python/py-fizzery/obj5.png")) (image-bindings.append [obj5 obj5_image]) (user_shapes.append obj5)) (do (setv obj2 (ball (int 505/2) (int 413/2) 20)) (setv obj2.color (Color "white")) (setv obj2.group 2) (setv obj2_image (pygame.image.load "/Users/thoughtstem/Dev/Python/py-fizzery/obj2.png")) (image-bindings.append [obj2 obj2_image]) (user_shapes.append obj2)) (do (setv obj1 (ball (int 505/2) (int 333/2) 20)) (setv obj1.color (Color "white")) (setv obj1.group 1) (setv obj1_image (pygame.image.load "/Users/thoughtstem/Dev/Python/py-fizzery/obj1.png")) (image-bindings.append [obj1 obj1_image]) (user_shapes.append obj1)) (do (setv obj9 (static_box (int 0) (int 10) 10 353)) (setv obj9.color (Color "white")) (setv obj9.group 9) (setv obj9_image (pygame.image.load "/Users/thoughtstem/Dev/Python/py-fizzery/obj9.png")) (image-bindings.append [obj9 obj9_image]) (user_shapes.append obj9)) (do (setv obj7 (static_box (int 0) (int 0) 505 10)) (setv obj7.color (Color "white")) (setv obj7.group 7) (setv obj7_image (pygame.image.load "/Users/thoughtstem/Dev/Python/py-fizzery/obj7.png")) (image-bindings.append [obj7 obj7_image]) (user_shapes.append obj7)) () () () ((setv (. obj2 mass) 10)) ((setv (. obj1 mass) 10)) () () defn image-for [s] (do (global image-bindings) (for (b image-bindings) (if (= (. b [0]) s) (return (. b [1])))) (return False)) defn draw_images [cosmetic] (do (defn f [keys] (do (global user-shapes) (for (s user-shapes) (if (not (image-for s)) (continue)) (if (not (= cosmetic (. s _cosmetic))) (continue)) (if (not (. s active)) (continue)) (if (. s body) (setv p (Vec2d (. s body position x) (. s body position y))) (setv p (Vec2d (. s _x) (. s _y)))) (setv angle 0) (if (. s body) (setv angle (. s body angle))) (setv angle_degrees (math.degrees angle)) (setv rotated_logo_img (pygame.transform.rotate (image-for s) (* -1 angle-degrees))) (setv offset (/ (Vec2d (rotated_logo_img.get_size)) 2)) (setv p (- p offset)) (setv screen (pygame.display.get-surface)) (screen.blit rotated_logo_img p)))) (return f)) defn draw_pivot_lines [keys] (do (global pivots) (for (p pivots) (setv start (. p body position)) (for (j (. p shape)) (setv other (. j a)) (setv end (. other position)) (setv screen (pygame.display.get_surface)) (pygame.draw.line screen (Color "black") start end)))) defn draw_connection_lines [keys] (do (global pivots) (for (c connected_shapes) (setv start (. c [0] body position)) (setv end (. c [1] body position)) (if (or (not (. c [0] active)) (not (. c [0] active))) (continue)) (setv screen (pygame.display.get_surface)) (pygame.draw.line screen (Color "black") start end))) add-observer (draw-images True) add-observer draw_pivot_lines add-observer draw_connection_lines add-observer (draw-images False) run)